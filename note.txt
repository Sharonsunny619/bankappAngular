OPEN BANKAPP
------------

cmd - code .
      ng serve --open
bankserver -> cmd - code .
                    npx nodemon index.js  
open mongodb                        




1)WEBSITES
------------

* fontawesome
* colorpicker
* google fonts
* Bootstrap 
  --------------
* | Angular.io| - angular official website
  --------------
* Angular pipe



2)to move div

* float - left,right
* inspect and tools
* margin left top bottom right  (moves entire div )(moves in available space)

* position property
1. static- child div stays inside parent div,will not move.
2. relative- child div stays within parent div but can move inside parent.
3. absolute- child div can move freely outside and inside parent div.
4. fixed- box remains fixed even if background is scrolled.
5. sticky- fixed for some point then moves freely.


3)to move contents in div

*  padding left right top bottom  (moves content within div)(adds more space)
* top left right bottom (to  move div within div)
* justify-content (space-between,space-evenly ...)

4)to create gallery

* margin (left,right...)
* float (left right...)
* position (static,absolute)
* display (flex)

5) box-shadow (to give shadows to boxes)
6) span (to give 2 color of 2 words )
7) hover (to change bgcolor of button and text inside it when cursor is moved on button) (button:hover{ color: ;, background-color: ; } in css)
8) backdrop-filter: blur(5px); invert(80%) sepia(90%) - to blur background image

Bootstrap


9) copy paste <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
 from site
10) git password : chijo5now

11) LINKING 
-------------

      IMP..................
 
 * css linking - using <link href=""> in head
 * js linking - using <script src=""> outside </body>

12)local storage linking
---------------------------

 * for moving from 1 page to other-  use  window.location='home.html'
 * for storing data in localstorage - localStorage.setItem('name' (key),username (value))
 * for accessing data from localstarage - localstorage.getItem('name' (key))
 * to code javascript in html use innerHTML  (result.innerHTML= `welcome`)

13)json/xml - * used to convert  data from front end to back end to appropriate fomat so that both front and back end can understand.  
               * stores data in json format  or xml format.
               
14)Math.random()- to generate random number  from 0 to 10 (int or float)  
   Math.random()*10 - to convert random number to integer   
   Math.floor(Math.random()*10)- convert float to int  

15) *https://jsonplaceholder.typicode.com/
    *https://restcountries.com/v2/name/uk?fullText=true       

16)NEW ANGULAR project
-----------------------

    *ng new projectname -  to create angular project  
    *npm i --force - to resolve small issues or errors
    *ng serve --open - to open an angular project


17)    data binding in angular
       -----------------------

    ts-component
    html-view

    1-one way binding

      1.1 component to view
        
         1.1.1 string interpollation                            -{{}}
         1.1.2 property binding                                 -[property]="value"

      1.2 view to component
         
         1.2.1 event binding                                    -(eventname)="method name()"
         1.2.2 event binding using $event                       -(eventname)="methodname($event)"
         1.2.3 evnt binding using template rendering variable   - #variable


    2-Two way binding

     2.1 ngmodel            [(ngmodel)]="value"
                            FormsModule

17)  Redirection in angular
     ----------------------

  navigateByUrl     - methiod used for Redirection.
  Router            - class
  AppRoutingModule  - module

18) Dependency Injection
--------------------------

* to use a methhod of class in another class
* in constructor
* steps        
--------
access specifier - public/private
variable
classname

private variable:classname


19)  Angular Services
    ------------------

ng g s servicename

20) ANGULAR DIRECTIVES
-----------------------

  1. STRUCTURAL DIRECTIVES - to handle structured datas in view of a componaent
       
         ngFor - can directly apply in html to access elements from array
         ngIf - for isung if loop  in html , to check conditions

  2. COMPONENT DIRECTIVES 
  3. ATTRIBUTE DIRECTIVES       


21) FORM VALIDATION IN ANGULAR
-------------------------------

we can create forms in 2 ways 
 
  1. Template Driven Form
  2. Model Driven Form

       Reactive Form
       -------------
         ReactiveFormsModule - module used to create model forms.

22) VALIDATOR FORMS IN ANGULAR
--------------------------------
 
 Validator - * A classs in angular it contains methods for applying validation.
             * it comes under angular core so no need for dependency injection. 

 access errors in validator rule - this.registerForm.get('uname)?.errors

             -valid- empty response
             -invalid- content 

23) LOCAL STORAGE IN ANGULAR
-----------------------------
- store   localStorage.setItem()  
- access   localStorage.getItem()         
- delete  localStorage.removeItem() 

24) PARENT CHILD COMPONENTS COMMUNICATON IN ANGULAR
-----------------------------------------------------

@Input - parent to child datasharing
@Output - child to parent datasharing
datas only share via selectoe of component

25) USER DEFINED EVENT CREATION IN ANGULAR
---------------------------------------

EventEmitter (from angular core) - class used to create events
emit()                                 - to start event




26) DATE IN ANGULAR
---------------------
Date - class
* create a object of class date to access date and time.

27) ANGULAR PIPE
--------------------

to transform datas into another format
eg: date pipe

28)CLIENT SERVER INTEGRATION
-----------------------------
-----------------------------

http request CREATION
---------------------

httpClientModule - module
httpClient - class


29) ASYNCHRONOUS REQUEST IN TS
--------------------------------

js -   promise    -resolve - then()
                  -reject - catch()
ts -   observable -resolve - subscribe()              
                  -reject  - catch()

Rxjs - library used to solve asynchronous code in ts.

Rxjs - (reactive extension for js)


30) APPEND TOKEN IN HEADERS OF HTTP
------------------------------------

1. create header

       HttpHeaders - class to create header object.  -   let headers=new HttpHeaders()
   
 2. Append token in header object                    -   headers.append('access-token',token)
                 


